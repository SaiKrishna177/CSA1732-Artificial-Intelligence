def evaluate(board):
    """
    Evaluate the board and return the score:
    +1 for 'X' win, -1 for 'O' win, 0 for draw, None if the game is still ongoing.
    """
    for i in range(3):
        # Check rows
        if board[i][0] == board[i][1] == board[i][2] and board[i][0] != ' ':
            return 1 if board[i][0] == 'X' else -1
        # Check columns
        if board[0][i] == board[1][i] == board[2][i] and board[0][i] != ' ':
            return 1 if board[0][i] == 'X' else -1

    # Check diagonals
    if board[0][0] == board[1][1] == board[2][2] and board[0][0] != ' ':
        return 1 if board[0][0] == 'X' else -1
    if board[0][2] == board[1][1] == board[2][0] and board[0][2] != ' ':
        return 1 if board[0][2] == 'X' else -1

    # Check for draw
    if all(cell != ' ' for row in board for cell in row):
        return 0  # Draw

    return None  # Game is still ongoing

def possible_moves(board):
    """
    Return a list of all possible moves (row, col) for the current board state.
    """
    return [(r, c) for r in range(3) for c in range(3) if board[r][c] == ' ']

def make_move(board, move, player):
    """
    Return a new board state after making the specified move.
    """
    new_board = [row[:] for row in board]
    new_board[move[0]][move[1]] = player
    return new_board

def minimax(board, depth, is_maximizing):
    """
    Minimax algorithm to find the best score for the current board state.
    """
    score = evaluate(board)
    if score is not None or depth == 0:
        return score if score is not None else 0

    if is_maximizing:
        best_score = float('-inf')
        for move in possible_moves(board):
            new_board = make_move(board, move, 'X')
            score = minimax(new_board, depth - 1, False)
            best_score = max(best_score, score)
        return best_score
    else:
        best_score = float('inf')
        for move in possible_moves(board):
            new_board = make_move(board, move, 'O')
            score = minimax(new_board, depth - 1, True)
            best_score = min(best_score, score)
        return best_score

def find_best_move(board):
    """
    Find the best move for 'X' using the minimax algorithm.
    """
    best_score = float('-inf')
    best_move = None
    for move in possible_moves(board):
        new_board = make_move(board, move, 'X')
        score = minimax(new_board, 3, False)
        if score > best_score:
            best_score = score
            best_move = move
    return best_move

def print_board(board):
    """
    Print the board in a human-readable format.
    """
    for row in board:
        print(" | ".join(row))
        print("-" * 5)

# Main game loop for testing
def main():
    board = [[' ', ' ', ' '], [' ', ' ', ' '], [' ', ' ', ' ']]
    current_player = 'X'

    while True:
        print_board(board)
        if current_player == 'X':
            move = find_best_move(board)
            if move:
                board = make_move(board, move, current_player)
        else:
            row = int(input("Enter row (0-2): "))
            col = int(input("Enter col (0-2): "))
            if board[row][col] == ' ':
                board = make_move(board, (row, col), current_player)
            else:
                print("Invalid move. Try again.")
                continue

        if evaluate(board) is not None:
            print_board(board)
            result = evaluate(board)
            if result == 1:
                print("X wins!")
            elif result == -1:
                print("O wins!")
            else:
                print("It's a draw!")
            break

        current_player = 'O' if current_player == 'X' else 'X'

if __name__ == "__main__":
    main()
